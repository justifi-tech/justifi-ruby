# frozen_string_literal: true

module Justifi
  # Headers provides an access wrapper to an API response's header data. It
  # mainly exists so that we don't need to expose the entire
  # `Net::HTTPResponse` object while still getting some of its benefits like
  # case-insensitive access to header names and flattening of header values.
  class JustifiResponseHeaders
    # Initializes a Headers object from a Net::HTTP::HTTPResponse object.
    def self.from_net_http(resp)
      new(resp.to_hash)
    end

    # `hash` is expected to be a hash mapping header names to arrays of
    # header values. This is the default format generated by calling
    # `#to_hash` on a `Net::HTTPResponse` object because headers can be
    # repeated multiple times. Using `#[]` will collapse values down to just
    # the first.
    def initialize(hash)
      if !hash.is_a?(Hash)
        raise ArgumentError,
          "expect hash to be a map of string header names to arrays of " \
          "header values"
      end

      @hash = {}

      # This shouldn't be strictly necessary because `Net::HTTPResponse` will
      # produce a hash with all headers downcased, but do it anyway just in
      # case an object of this class was constructed manually.
      #
      # Also has the effect of duplicating the hash, which is desirable for a
      # little extra object safety.
      hash.each do |k, v|
        @hash[k.downcase] = v
      end
    end
  end

  module JustifiResponseBase
    # A Hash of the HTTP headers of the response.
    attr_accessor :http_headers

    # The integer HTTP status code of the response.
    attr_accessor :http_status

    # The JustiFi request ID of the response.
    attr_accessor :request_id

    def self.populate_for_net_http(resp, http_resp)
      resp.http_headers = JustifiResponseHeaders.from_net_http(http_resp)
      resp.http_status = http_resp.code.to_i
      resp.request_id = http_resp["request-id"]
    end
  end

  # JustifiResponse encapsulates some vitals of a response that came back from
  # the Justifi API.
  class JustifiResponse
    include JustifiResponseBase
    extend Gem::Deprecate

    # The data contained by the HTTP body of the response deserialized from
    # JSON.
    attr_accessor :data

    # The raw HTTP body of the response.
    attr_accessor :http_body

    # The error error_message from JustiFi API
    attr_accessor :error_message

    # The boolean flag based on Net::HTTPSuccess
    attr_accessor :success

    # The error hash from JustiFi API
    attr_accessor :error_details

    # Initializes a JustifiResponse object from a Net::HTTP::HTTPResponse
    # object.
    def self.from_net_http(http_resp)
      resp = JustifiResponse.new
      resp.data = JSON.parse(http_resp.body, symbolize_names: true)
      resp.http_body = http_resp.body
      resp.success = http_resp.is_a? Net::HTTPSuccess
      resp.error_message = resp.data.dig(:error, :message)
      resp.error_details = resp.data.dig(:error)
      JustifiResponseBase.populate_for_net_http(resp, http_resp)
      resp
    end
  end
end
